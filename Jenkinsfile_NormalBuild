#!groovy

pipeline {
    // define a jenkins agent with a globally configured docker agent template labeled 'docker-slave', which also has the docker cloud configuration
     agent{ node {  label 'docker-slave' }}

    environment {

        // installing the globally defined tools in every node that is used, referenced by their labels
        JAVA_HOME = "${ tool 'openJDK_8' }"
        M2_HOME = "${ tool 'maven_3.6.0' }"
        PATH = "${PATH}" + ":${M2_HOME}/bin" + ":${JAVA_HOME}/bin"

        // does not enable the start of local containers, the docker cli is used for remote access
        DOCKER_PATH = "${ tool 'docker_latest' }"
        
        buildSuccessful = false;
     }

    stages {
         stage('Prepare') {  // fail > failure
             steps {
                checkout scm
                script {
                    // loading our custom lib
                    lib = load 'jenkins.lib'
                    lib.setJobProperties()
                }
            }
        }
        stage('Build Test') {  // fail > failure
            steps {
                script {
                    lib.printBuildResult()
                    try {
                        sh " mvn clean install " +
                        " -DskipITs " +
                        " -PQueoCIServer,JaCoCo " +
                        " -Dbuildtime.output.log=true " +
                        " -Dbuildtime.output.csv=true " +
                        " -Dbuildtime.output.csv.file=mvnBuildPerformanceLog.csv " +
                        " -Dbuildnode.name=jenkinsjava_${EXECUTOR_NUMBER} "

                        buildSuccessful = true
                    } catch (exception) {
                        lib.setToFailure()
                        lib.printStackTrace(exception)
                    }
                    lib.printBuildResult()
                }
            }
        }

        stage('IT-Test') {  // fail > unstable
            environment {
                //must be executed in a stage, so it runs on the docker node, not the main jenkins
                //connects to the docker bridge, inspecting the network settings for the current host, getting the port mapping for 8080. This is needed to give the selenium grid the right entry point
                //the docker host address was configured by our admins as an address in the default bridge network, where all containers should start. The variable is a global jenkins parameter
                HTTP_PORT = (sh(script: '$DOCKER_PATH/docker -H ${DOCKER_HOST_ADDRESS} inspect --format=\'{{(index (index .NetworkSettings.Ports \"8080/tcp\") 0).HostPort}}\' `hostname` ', returnStdout: true)).trim()
                //rmi and ajp are not needed outside of the host

                 EXTERNAL_APPLICATION_BASE_URL_WITHOUTPORT = "http://${JENKINS_SERVER_NAME}"
             }
            steps {
                script {
                    lib.printBuildResult()
                    if (buildSuccessful == true) {
                        try {
                            sh " mvn clean install --projects queo-commons-asserts-it failsafe:verify  " +
                            " -PQueoCIServer,integrationGridFirefox " +
                            " -Dbuildtime.output.log=true " +
                            " -Dbuildtime.output.csv=true " +
                            " -Dbuildtime.output.csv.file=mvnIT-TestPerformanceLog.csv " +
                            " -Dit.webApp.serverBaseUrl.urlWithoutPort=${EXTERNAL_APPLICATION_BASE_URL_WITHOUTPORT} " +
                            " -Dit.webApp.serverBaseUrl.port.http=${HTTP_PORT} " +
                            " -Dit.webApp.serverBaseUrl.port.http.internal=8080 " +
                            " -Dbuildnode.name=jenkinsjava_${EXECUTOR_NUMBER}" +
                            " -Dtest.baseUrl=${EXTERNAL_APPLICATION_BASE_URL_WITHOUTPORT}:${HTTP_PORT}/queo-commons-asserts "
                        } catch (exception) {
                            lib.setToUnstable()
                            lib.printStackTrace(exception)
                        }
                    }
                    lib.printBuildResult()
                }
            }
        }

        stage('Trigger Deploy') { // fail > ..ignore (since we don't wait for an result - just fire and forget)
            steps {
                script {
                    lib.printBuildResult()
                    if (buildSuccessful) {
                        build job: 'queo-commons-asserts-STAGE_DEPLOYMENT', wait: false
                    }
                    lib.printBuildResult()
                }
            }
        }

        stage('Site') {  // fail > unstable
        steps {
            script {
                if (buildSuccessful == true) {
                    lib.printBuildResult()
                    try {
                        sh " mvn site site:stage " +
                        "-PQueoCIServer,JaCoCo " +
                        "-Dbuildtime.output.log=true " +
                        "-Dbuildtime.output.csv=true " +
                        "-Dbuildtime.output.csv.file=mvnSitePerformanceLog.csv"
                    } catch (exception) {
                        lib.setToUnstable()
                        lib.printStackTrace(exception)
                    }
                    lib.printBuildResult()
                }
            }
        }
    }

        stage('Results') { // fail > unstable
            steps {
                script {
                    lib.printBuildResult()
                    try {
                        lib.publishToDos()
                        lib.publishCheckstyle()
                        lib.publishSpotbugs()
                        lib.publishOwaspDependencyCheckResults()
                        lib.publishHtmlReports()
                        lib.publishXunitReports()
                        lib.publishJaCoCoTestCoverage()
                        lib.notifyViaMail()
                    } catch (exception) {
                        lib.setToUnstable()
                        lib.printStackTrace(exception)
                    }
                    lib.printBuildResult()
                }
            }
        }
    }
}